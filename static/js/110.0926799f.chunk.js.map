{"version":3,"file":"static/js/110.0926799f.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/Details/Validate.js","redux/selector.js","components/ContactForm/ContactForm.jsx","components/FilterContact/FilterContact.styled.jsx","components/FilterContact/FilterContact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Container.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 12px;\n`;\n\nexport const Button = styled.button`\n  background-color: #21a4c5;\n  padding: 8px;\n  color: #fff;\n  \n  :hover {\n    background-color: #860c94;\n  }\n  :active {\n    background-color: #860c94;\n  }\n`;","import * as Yup from 'yup';\n\nconst schema = Yup.object().shape({\n  name: Yup.string().min(2).max(20).required(''),\n  number: Yup.string().min(7).max(13).required(''),\n});\n\nconst NumberMask = [\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  '-',\n  /\\d/,\n  /\\d/,\n  /\\d/,\n  /\\d/,\n];\n\nexport { schema, NumberMask };","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilters = state => state.filters;\n\nexport const selectVisibleContact = createSelector(\n  [selectContacts, selectFilters],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);","import { Formik, Field, ErrorMessage } from 'formik';\nimport { Form, Label, Button } from './ContactForm.styled';\nimport { schema, NumberMask } from '../Details/Validate';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selector';\nimport toast from 'react-hot-toast';\nimport MaskedInput from 'react-text-mask';\n\nexport const ContactForm = () => {\n  const contact = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  return (\n    <Formik\n      initialValues={{  name: '', number: '' }} \n          \n      validationSchema={schema}\n      \n      onSubmit={(values, action) => {  \n      const duplicateName = contact.find(\n        ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n      );\n\n      return duplicateName\n      ? toast(`${values.name} is already in contacts.`, { icon: '⚠️' })\n      : (dispatch(addContact(values)), action.resetForm());\n  }}\n    >\n      <Form autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name*\n          <Field\n            type=\"text\"\n            name=\"name\"\n            // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            // required\n          />\n        </Label>\n        <ErrorMessage name=\"name\" component={'span'} />\n        <Label htmlFor=\"number\">\n          Number*\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            component={({ field }) => (\n              <MaskedInput\n                {...field}\n                // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                // title=\"The phone number must contain 7 digits\"\n                mask={NumberMask}\n                />\n            )}\n          />\n        </Label>\n        <ErrorMessage name=\"number\" component={'span'} />\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n\n\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n`;\n\nexport const Text = styled.p`\n  margin-bottom: 10px;\n`;","import { Label, Text } from './FilterContact.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filteredContact } from 'redux/filtersSlice';\nimport { selectFilters } from 'redux/selector';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target: { value } }) => {\n    dispatch(filteredContact(value.trim()));\n  };\n  return (\n    <Label>\n      <Text>Find contacts by name</Text>\n      <input type=\"text\" value={filter} onChange={changeFilter} />\n    </Label>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-left: 0;\n\tmargin-bottom: 20px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 20px;\n  padding: 5px;\n`;\nexport const Button = styled.button`\n  padding: 5px;\n  background-color: #0a47b7;\n\n  :hover {\n    background-color: #00158e;\n  }\n  :active {\n    background-color: #00158e;\n  }\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  font-size: 14px;\n  margin-right: 10px;\n`;\n\n\n\n\n","import { List, Item, Button, Text } from './ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectFilters } from 'redux/selector';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilters);\n\n  const filterContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLocaleLowerCase())\n\t);\n\n  return (\n    <List>\n    {filterContacts.map(({ phone, name, id }) => {\n      return (\n        <Item key={id}>\n          <Text>\n            {name}: {phone}\n          </Text>\n          <Button\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            delete\n          </Button>\n        </Item>\n      );\n    })}\n  </List>\n);\n};\n  \n\n\n\n\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  padding: 20px;\n  max-width: 768px;\n  border-radius: 20px;\n\n  background-color: #1a202c89;\n  backdrop-filter: blur(5px);\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/FilterContact/FilterContact';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectError, selectIsLoading } from 'redux/selector';\nimport { ContactsLoader } from 'components/Loader/Loader';\nimport { fetchContacts } from 'redux/operations';\nimport { Container } from 'components/Container.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && !error && <ContactsLoader />}\n    </Container>\n  );\n}\n"],"names":["Form","styled","FormikForm","Label","Button","schema","Yup","shape","name","min","max","required","number","NumberMask","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilters","filters","createSelector","filter","contact","toLowerCase","includes","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","action","find","toast","icon","addContact","resetForm","autoComplete","htmlFor","type","component","field","mask","Text","Filter","value","onChange","target","filteredContact","trim","List","Item","ContactList","filterContacts","toLocaleLowerCase","map","phone","id","onClick","deleteContact","Container","Contacts","useEffect","fetchContacts"],"sourceRoot":""}